syntax = "proto3";
package spire.server.datastore;
option go_package = "datastore";

import public "github.com/spiffe/spire/proto/common/plugin/plugin.proto";
import public "github.com/spiffe/spire/proto/common/common.proto";

// Represents the trust bundle of a foreign trust domain
message Bundle {
    // SPIFFE ID of the foreign trust domain
    string trust_domain = 1;

    // CA Certificates
    // ASN.1 DER encoded
    bytes ca_certs = 2;
}

message Bundles {
    repeated Bundle bundles = 1;
}

// Represents a single entry in NodeResolverMap and maps node properties
// to logical attributes (i.e. an AWS instance to its ASG).
message NodeResolverMapEntry {
    string baseSpiffeId = 1;
    spire.common.Selector selector = 2;
}

// Represents a single entry in AttestedNodes and stores the node's
// SPIFFE ID, the type of attestation it performed, as well as the serial
// number and expiration date of its node SVID.
message AttestedNodeEntry {
    // Spiffe ID
    string baseSpiffeId = 1;

    // Attestation type
    string attestedDataType = 2;

    // Serial number
    string certSerialNumber = 3;

    // Expiration date
    string certExpirationDate = 4;
}

//
//
//

// Represents an Attested Node entry to create
message CreateAttestedNodeEntryRequest {
    // Attested node entry
    AttestedNodeEntry attestedNodeEntry = 1;
}

// Represents the created Attested Node entry
message CreateAttestedNodeEntryResponse {
    // Attested node entry
    AttestedNodeEntry attestedNodeEntry = 1;
}


// Represents the Spiffe ID of the node entry to retrieve
message FetchAttestedNodeEntryRequest {
    // SPIFFE ID
    string baseSpiffeId = 1;
}

// Represents an Attested Node entry
message FetchAttestedNodeEntryResponse {
    // Attested node entry
    AttestedNodeEntry attestedNodeEntry = 1;
}


// Empty Request
message FetchStaleNodeEntriesRequest {
}

// Represents dead nodes for which the base SVID has expired
message FetchStaleNodeEntriesResponse {
    // List of attested node entries
    repeated AttestedNodeEntry attestedNodeEntryList = 1;
}

// Represents Attested node entry fields to update
message UpdateAttestedNodeEntryRequest {
    // SPIFFE ID
    string baseSpiffeId = 1;
    // Serial number
    string certSerialNumber = 2;
    // Expiration date
    string certExpirationDate = 3;
}

// Represents the updated Attested node entry
message UpdateAttestedNodeEntryResponse {
    // Attested node entry
    AttestedNodeEntry attestedNodeEntry = 1;
}


// Represents the Spiffe ID of the Attested node entry to delete
message DeleteAttestedNodeEntryRequest {
    // SPIFFE ID
    string baseSpiffeId = 1;
}

// Represents the deleted Attested node entry
message DeleteAttestedNodeEntryResponse {
    AttestedNodeEntry attestedNodeEntry = 1;
}

//
//
//

// Represents a Node resolver map entry to create
message CreateNodeResolverMapEntryRequest {
    // Node resolver map entry
    NodeResolverMapEntry nodeResolverMapEntry = 1;
}

// Represents the created Node resolver map entry
message CreateNodeResolverMapEntryResponse {
    // Node resolver map entry
    NodeResolverMapEntry nodeResolverMapEntry = 1;
}


// Represents a Spiffe ID
message FetchNodeResolverMapEntryRequest {
    // SPIFFE ID
    string baseSpiffeId = 1;
}

// Represents a list of Node resolver map entries for the specified Spiffe ID
message FetchNodeResolverMapEntryResponse {
    // List of Node resolver map entries
    repeated NodeResolverMapEntry nodeResolverMapEntryList = 1;
}


// Represents a Node resolver map entry to delete
message DeleteNodeResolverMapEntryRequest {
    // Node resolver map entry
    NodeResolverMapEntry nodeResolverMapEntry = 1;
}

// Represents a list of Node resolver map entries
message DeleteNodeResolverMapEntryResponse {
    // List of Node resolver map entries
    repeated NodeResolverMapEntry nodeResolverMapEntryList = 1;
}


// Represents a list of Node resolver map entries
message RectifyNodeResolverMapEntriesRequest {
    // List of Node resolver map entries
    repeated NodeResolverMapEntry nodeResolverMapEntryList = 1;
}

// Represents a list of Node resolver map entries
message RectifyNodeResolverMapEntriesResponse {
    // List of Node resolver map entries
    repeated NodeResolverMapEntry nodeResolverMapEntryList = 1;
}

//
//
//

// Represents a Registration entry to create
message CreateRegistrationEntryRequest {
    // Registration entry
    spire.common.RegistrationEntry registeredEntry = 1;
}

// Represents the created Registration entry
message CreateRegistrationEntryResponse {
    // Registration entry ID
    string registeredEntryId = 1;
}


// Represents a Registration entry ID to fetch
message FetchRegistrationEntryRequest {
    // Registration entry ID
    string registeredEntryId = 1;
}

// Represents a Registration entry
message FetchRegistrationEntryResponse {
    // Registration entry
    spire.common.RegistrationEntry registeredEntry = 1;
}

// Represents a list of Registration entries
message FetchRegistrationEntriesResponse {
    // Registration entries
    spire.common.RegistrationEntries registeredEntries = 1;
}


// Represents a Registration entry to update
message UpdateRegistrationEntryRequest {
    // Registration entry ID
    string registeredEntryId = 1;

    // Registration entry
    spire.common.RegistrationEntry registeredEntry = 2;
}

// Represents the updated Registration entry
message UpdateRegistrationEntryResponse {
    // Registration entry
    spire.common.RegistrationEntry registeredEntry = 1;
}


// Represents a Registration entry ID to delete
message DeleteRegistrationEntryRequest {
    // Registration entry ID
    string registeredEntryId = 1;
}

// Represents the deleted Registration entry
message DeleteRegistrationEntryResponse {
    // Registration entry
    spire.common.RegistrationEntry registeredEntry = 1;
}

//
//
//

// Represents a Parent ID
message ListParentIDEntriesRequest {
    // Parent ID
    string parentId = 1;
}

// Represents a list of Registered entries with the specified Parent ID
message ListParentIDEntriesResponse {
    // List of Registration entries
    repeated spire.common.RegistrationEntry registeredEntryList = 1;
}

// Represents a selector
message ListSelectorEntriesRequest {
    // Selector
    repeated spire.common.Selector selectors = 1;
}

// Represents a list of Registered entries with the specified selector
message ListSelectorEntriesResponse {
    // List of Registration entries
    repeated spire.common.RegistrationEntry registeredEntryList = 1;
}

// Represents a Spiffe ID
message ListSpiffeEntriesRequest {
    // SPIFFE ID
    string spiffeId = 1;
}

// Represents a list of Registered entries with the specified Spiffe ID
message ListSpiffeEntriesResponse {
    // List of Registration entries
    repeated spire.common.RegistrationEntry registeredEntryList = 1;
}

//
//
//

// Represents a join token and associated metadata, if known
message JoinToken {
    string token = 1;

    // Expiration date, represented in UNIX time
    int64 expiry = 2;
}

// Represents a logical dump's message of the current datastore's data.
message Dump {
    message Progress {
        message Count {
            int32 bundles = 1;
            int32 joinTokens = 2;
            int32 attestedNodeEntries = 3;
            int32 nodeResolverMapEntries = 4;
            int32 registrationEntries = 5;
            // Amount of bytes occupied by certificates of this count's bundles.
            int32 certBytes = 6;
        }
        // Amount of entities already dumped per entity type, including this Dump's entities.
        Count dumped = 1;
        // Total amount of entities to dump per entity type.
        Count total = 2;
    }
    // Data about dump's progress.
    Progress progress = 1;
    // Entities of each type to be dumped.
    repeated Bundle bundles = 2;
    repeated JoinToken joinTokens = 3;
    repeated AttestedNodeEntry attestedNodeEntries = 4;
    repeated NodeResolverMapEntry nodeResolverMapEntries = 5;
    repeated spire.common.RegistrationEntry registrationEntries = 6;
}

service DataStore {
    // Creates a Bundle
    rpc CreateBundle(Bundle) returns (Bundle);
    // Updates the specified Bundle, overwriting existing certs
    rpc UpdateBundle(Bundle) returns (Bundle);
    // Appends the provided certs onto an existing bundle, creating a new bundle if one doesn't exist
    rpc AppendBundle(Bundle) returns (Bundle);
    // Deletes the specified Bundle
    rpc DeleteBundle(Bundle) returns (Bundle);
    // Returns the specified Bundle
    rpc FetchBundle(Bundle) returns (Bundle);
    // List all Bundles
    rpc ListBundles(spire.common.Empty) returns (Bundles);

    // Creates an Attested Node Entry
    rpc CreateAttestedNodeEntry(CreateAttestedNodeEntryRequest) returns (CreateAttestedNodeEntryResponse);
    // Retrieves the Attested Node Entry
    rpc FetchAttestedNodeEntry(FetchAttestedNodeEntryRequest) returns (FetchAttestedNodeEntryResponse);
    // Retrieves dead nodes for which the base SVID has expired
    rpc FetchStaleNodeEntries(FetchStaleNodeEntriesRequest) returns (FetchStaleNodeEntriesResponse);
    // Updates the Attested Node Entry
    rpc UpdateAttestedNodeEntry(UpdateAttestedNodeEntryRequest) returns (UpdateAttestedNodeEntryResponse);
    // Deletes the Attested Node Entry
    rpc DeleteAttestedNodeEntry(DeleteAttestedNodeEntryRequest) returns (DeleteAttestedNodeEntryResponse);

    // Creates a Node resolver map Entry
    rpc CreateNodeResolverMapEntry(CreateNodeResolverMapEntryRequest) returns (CreateNodeResolverMapEntryResponse);
    // Retrieves all Node Resolver Map Entry for the specific base SPIFFEID
    rpc FetchNodeResolverMapEntry(FetchNodeResolverMapEntryRequest) returns (FetchNodeResolverMapEntryResponse);
    // Deletes all Node Resolver Map Entry for the specific base SPIFFEID
    rpc DeleteNodeResolverMapEntry(DeleteNodeResolverMapEntryRequest) returns (DeleteNodeResolverMapEntryResponse);
    // Used for rectifying updated node resolutions
    rpc RectifyNodeResolverMapEntries(RectifyNodeResolverMapEntriesRequest) returns (RectifyNodeResolverMapEntriesResponse);

    // Creates a Registered Entry
    rpc CreateRegistrationEntry(CreateRegistrationEntryRequest) returns (CreateRegistrationEntryResponse);
    // Retrieve a specific registered entry
    rpc FetchRegistrationEntry(FetchRegistrationEntryRequest) returns (FetchRegistrationEntryResponse);
    // Retrieve all registration entries
    rpc FetchRegistrationEntries(spire.common.Empty) returns (FetchRegistrationEntriesResponse);
    // Updates a specific registered entry
    rpc UpdateRegistrationEntry(UpdateRegistrationEntryRequest) returns (UpdateRegistrationEntryResponse);
    // Deletes a specific registered entry
    rpc DeleteRegistrationEntry(DeleteRegistrationEntryRequest) returns (DeleteRegistrationEntryResponse);

    // Retrieves all the registered entry with the same ParentID
    rpc ListParentIDEntries(ListParentIDEntriesRequest) returns (ListParentIDEntriesResponse);
    // Retrieves all the registered entry matching exactly the compound Selector
    rpc ListSelectorEntries(ListSelectorEntriesRequest) returns (ListSelectorEntriesResponse);
    // Retrieves registered entries containing all of the specified selectors
    rpc ListMatchingEntries(ListSelectorEntriesRequest) returns (ListSelectorEntriesResponse);
    // Retrieves all the registered entry with the same SpiffeId
    rpc ListSpiffeEntries(ListSpiffeEntriesRequest) returns (ListSpiffeEntriesResponse);

    // Register a new join token
    rpc RegisterToken(JoinToken) returns (spire.common.Empty);
    // Fetch a token record
    rpc FetchToken(JoinToken) returns (JoinToken);
    // Delete the referenced token
    rpc DeleteToken(JoinToken) returns (spire.common.Empty);
    // Delete all tokens with expiry less than the one specified
    rpc PruneTokens(JoinToken) returns (spire.common.Empty);

    // Applies the plugin configuration
    rpc Configure(spire.common.plugin.ConfigureRequest) returns (spire.common.plugin.ConfigureResponse);
    // Returns the version and related metadata of the installed plugin
    rpc GetPluginInfo(spire.common.plugin.GetPluginInfoRequest) returns (spire.common.plugin.GetPluginInfoResponse);

    // Dumps the datastore data using a server stream. Each Dump message streamed can contain
    // any number of each entity type. So, callers must not make any assumptions about 
    // how many messages will be streamed.
    rpc Dump(spire.common.Empty) returns (stream spire.server.datastore.Dump);
    // Restores the datastore using a client stream. Each Dump message streamed can contain
    // any number of each entity type. So, datastores must not make any assumptions about 
    // how many messages will be streamed.
    rpc Restore(stream spire.server.datastore.Dump) returns (spire.common.Empty);
}
